vrt_warp(t_srs = trs, te = te, tr = c(30, 30)) |>
vrt_stack() |>
vrt_set_py_pixelfun(pixfun = median_numpy()) |>
vrt_compute(
engine = "gdalraster"
)
median_composite
}
mc <- get_vrtility(fi)
fi$assets[[1]]
fi_vrtility <- function(x) {
library(vrtility)
mirai::daemons(24)
bbox <- unlist(x$assets[[1]][, c("llxmin", "llymin", "llxmax", "lymax")])
te <- bbox_to_projected(bbox)
trs <- attr(te, "wkt")
s2_stac <- hls_stac_query(
bbox = bbox,
start_date = format(x$solard, "%Y-%m-%d"),
end_date = format(as.Date(x$solard)+ 1, "%Y-%m-%d"),
#stac_source = "https://planetarycomputer.microsoft.com/api/stac/v1/",
#collection = "hls2-s30",
stac_source = "https://earth-search.aws.element84.com/v1",
collection = "sentinel-2-c1-l2a",
max_cloud_cover = 100,
assets = c("red", "green", "blue", "scl")
)
# number of items:
length(s2_stac$features)
#> [1] 10
median_composite <- vrt_collect(s2_stac) |>
# vrt_set_maskfun(
#   mask_band = "scl",
#   mask_values = c(0),
#   build_mask_pixfun = build_bitmask()
# ) |>
vrt_warp(t_srs = trs, te = te, tr = c(30, 30)) |>
vrt_stack() |>
vrt_set_py_pixelfun(pixfun = median_numpy()) |>
vrt_compute(
engine = "gdalraster"
)
median_composite
}
mc <- fi_vrtility(fi)
fi_vrtility <- function(x) {
library(vrtility)
mirai::daemons(24)
bbox <- unlist(x$assets[[1]][, c("llxmin", "llymin", "llxmax", "llymax")])
te <- bbox_to_projected(bbox)
trs <- attr(te, "wkt")
s2_stac <- hls_stac_query(
bbox = bbox,
start_date = format(x$solard, "%Y-%m-%d"),
end_date = format(as.Date(x$solard)+ 1, "%Y-%m-%d"),
#stac_source = "https://planetarycomputer.microsoft.com/api/stac/v1/",
#collection = "hls2-s30",
stac_source = "https://earth-search.aws.element84.com/v1",
collection = "sentinel-2-c1-l2a",
max_cloud_cover = 100,
assets = c("red", "green", "blue", "scl")
)
# number of items:
length(s2_stac$features)
#> [1] 10
median_composite <- vrt_collect(s2_stac) |>
# vrt_set_maskfun(
#   mask_band = "scl",
#   mask_values = c(0),
#   build_mask_pixfun = build_bitmask()
# ) |>
vrt_warp(t_srs = trs, te = te, tr = c(30, 30)) |>
vrt_stack() |>
vrt_set_py_pixelfun(pixfun = median_numpy()) |>
vrt_compute(
engine = "gdalraster"
)
median_composite
}
mc <- fi_vrtility(fi)
remove.packages("vrtility")
library(dplyr)
library(targets)
tar_load(result)
fi_vrtility <- function(x) {
library(vrtility)
mirai::daemons(24)
bbox <- unlist(x$assets[[1]][, c("llxmin", "llymin", "llxmax", "llymax")])
te <- bbox_to_projected(bbox)
trs <- attr(te, "wkt")
s2_stac <- hls_stac_query(
bbox = bbox,
start_date = format(x$solard, "%Y-%m-%d"),
end_date = format(as.Date(x$solard)+ 1, "%Y-%m-%d"),
#stac_source = "https://planetarycomputer.microsoft.com/api/stac/v1/",
#collection = "hls2-s30",
stac_source = "https://earth-search.aws.element84.com/v1",
collection = "sentinel-2-c1-l2a",
max_cloud_cover = 100,
assets = c("red", "green", "blue", "scl")
)
# number of items:
length(s2_stac$features)
#> [1] 10
median_composite <- vrt_collect(s2_stac) |>
# vrt_set_maskfun(
#   mask_band = "scl",
#   mask_values = c(0),
#   build_mask_pixfun = build_bitmask()
# ) |>
vrt_warp(t_srs = trs, te = te, tr = c(30, 30)) |>
vrt_stack() |>
vrt_set_py_pixelfun(pixfun = median_numpy()) |>
vrt_compute(
engine = "gdalraster"
)
median_composite
}
fi <- sample_n(result, 1L)
mc <- fi_vrtility(fi)
library(dplyr)
library(targets)
tar_load(result)
fi_rast <- function(x) {
terra::rast(x$outfile[1])
}
stretch_hist <- function(x, ...) {
## stretch as if all the pixels were in the same band (not memory safe)
rv <- terra::stretch(terra::rast(matrix(terra::values(x))), histeq = TRUE, maxcell = terra::ncell(x)*3)
## set the values to the input, then stretch to 0,255
terra::stretch(terra::setValues(x, c(terra::values(rv))), histeq = FALSE, maxcell = terra::ncell(x))
}
fi_plot <- function(x, shist = TRUE) {
r <- fi_rast(x)
if (shist) r <- stretch_hist(r)
terra::plotRGB(r, stretch = TRUE)
}
cl <- function(x) dsn::vsicurl(x)
noscale <- function(x) sprintf("vrt://%s?unscale=false", cl(x))
mkwarp <- function(x, res = 20, fex = 1) {
ex <- unlist(x$assets[[1L]][1L, c("xmin", "xmax", "ymin", "ymax")]) * fex
crs <- x$assets[[1]]$crs[1L]
print(crs)
function(x) {
vapour::gdal_raster_dsn(noscale(x), target_ext = ex,  target_crs = crs, target_res = rep(res, length.out = 2L))[[1]]
}
}
#warp <- mkwarp(fi)
#warp(fi$outfile[1L])
get_red <- function(x) x$assets[[1L]]$red
get_green <- function(x) x$assets[[1L]]$green
get_blue <- function(x) x$assets[[1L]]$blue
fi_rgb <- function(x, fex = 1) {
rgb <- list(red = get_red(x), green = get_green(x), blue = get_blue(x))
warp <- mkwarp(x[1L, ], fex = fex)
#print(rgb)
terra::rast(unlist(lapply(rgb, warp)), raw = TRUE)
}
fi_vrtility <- function(x) {
library(vrtility)
mirai::daemons(24)
bbox <- unlist(x$assets[[1]][1L, c("llxmin", "llymin", "llxmax", "llymax")])
print(bbox)
te <- bbox_to_projected(bbox)
trs <- attr(te, "wkt")
s2_stac <- stac_query(
bbox = bbox,
start_date = format(as.Date(x$solard)-1, "%Y-%m-%d"),
end_date = format(as.Date(x$solard) + 1, "%Y-%m-%d"),
stac_source = "https://earth-search.aws.element84.com/v1",
collection = "sentinel-2-c1-l2a",
#stac_source = "https://planetarycomputer.microsoft.com/api/stac/v1/",
#collection = "hls2-s30",
#max_cloud_cover = 100,
#assets = c("B02", "B03", "B04", "B8A", "Fmask"),
assets = c("red", "green", "blue", "scl")
)
# number of items:
length(s2_stac$features)
#> [1] 10
median_composite <- vrt_collect(s2_stac) |>
# vrt_set_maskfun(
#   mask_band = "Fmask",
#   mask_values = c(0, 1, 2, 3),
#   build_mask_pixfun = build_bitmask()
# ) |>
vrt_warp(t_srs = trs, te = te, tr = c(20, 20)) |>
#vrt_stack() |>
#vrt_set_py_pixelfun(pixfun = median_numpy()) |>
vrt_compute(
engine = "gdalraster"
)
median_composite
}
result <- filter(result, location == "Macquarie")
fi <- sample_n(result, 1L)
xm <- fi_vrtility(fi)
results
result
fi
fi$assets
r <- fi_rgb(fi, fex = 1)
par(mfrow = c(2, 2))
plotRGB(r, stretch = TRUE)
library(terra)
par(mfrow = c(2, 2))
plotRGB(r, stretch = TRUE)
plotRGB(stretch_hist(rast(fi$outfile)))
xm <- fi_vrtility(fi)
library(dplyr)
library(targets)
tar_load(result)
fi_rast <- function(x) {
terra::rast(x$outfile[1])
}
stretch_hist <- function(x, ...) {
## stretch as if all the pixels were in the same band (not memory safe)
rv <- terra::stretch(terra::rast(matrix(terra::values(x))), histeq = TRUE, maxcell = terra::ncell(x)*3)
## set the values to the input, then stretch to 0,255
terra::stretch(terra::setValues(x, c(terra::values(rv))), histeq = FALSE, maxcell = terra::ncell(x))
}
fi_plot <- function(x, shist = TRUE) {
r <- fi_rast(x)
if (shist) r <- stretch_hist(r)
terra::plotRGB(r, stretch = TRUE)
}
cl <- function(x) dsn::vsicurl(x)
noscale <- function(x) sprintf("vrt://%s?unscale=false", cl(x))
mkwarp <- function(x, res = 20, fex = 1) {
ex <- unlist(x$assets[[1L]][1L, c("xmin", "xmax", "ymin", "ymax")]) * fex
crs <- x$assets[[1]]$crs[1L]
print(crs)
function(x) {
vapour::gdal_raster_dsn(noscale(x), target_ext = ex,  target_crs = crs, target_res = rep(res, length.out = 2L))[[1]]
}
}
#warp <- mkwarp(fi)
#warp(fi$outfile[1L])
get_red <- function(x) x$assets[[1L]]$red
get_green <- function(x) x$assets[[1L]]$green
get_blue <- function(x) x$assets[[1L]]$blue
fi_rgb <- function(x, fex = 1) {
rgb <- list(red = get_red(x), green = get_green(x), blue = get_blue(x))
warp <- mkwarp(x[1L, ], fex = fex)
#print(rgb)
terra::rast(unlist(lapply(rgb, warp)), raw = TRUE)
}
fi_vrtility <- function(x) {
library(vrtility)
# mirai::daemons(24)
bbox <- unlist(x$assets[[1]][1L, c("llxmin", "llymin", "llxmax", "llymax")])
print(bbox)
te <- bbox_to_projected(bbox)
trs <- attr(te, "wkt")
s2_stac <- stac_query(
bbox = bbox,
start_date = format(as.Date(x$solard)-1, "%Y-%m-%d"),
end_date = format(as.Date(x$solard) + 1, "%Y-%m-%d"),
stac_source = "https://earth-search.aws.element84.com/v1",
collection = "sentinel-2-c1-l2a",
#stac_source = "https://planetarycomputer.microsoft.com/api/stac/v1/",
#collection = "hls2-s30",
#max_cloud_cover = 100,
#assets = c("B02", "B03", "B04", "B8A", "Fmask"),
assets = c("red", "green", "blue", "scl")
)
# number of items:
length(s2_stac$features)
#> [1] 10
median_composite <- vrt_collect(s2_stac) |>
# vrt_set_maskfun(
#   mask_band = "Fmask",
#   mask_values = c(0, 1, 2, 3),
#   build_mask_pixfun = build_bitmask()
# ) |>
vrt_warp(t_srs = trs, te = te, tr = c(20, 20)) |>
#vrt_stack() |>
#vrt_set_py_pixelfun(pixfun = median_numpy()) |>
vrt_compute(
engine = "gdalraster"
)
median_composite
}
result <- filter(result, location == "Macquarie")
fi <- sample_n(result, 1L)
xm <- fi_vrtility(fi)
r <- fi_rgb(fi, fex = 1)
library(terra)
par(mfrow = c(2, 2))
plotRGB(r, stretch = TRUE)
plotRGB(stretch_hist(rast(fi$outfile)))
#plotRGB(stretch_hist(rast(fi$outfile)), stretch = F)
plot_raster_src(xm[2], 3:1, rgb_trans = "hist")
#plotRGB(stretch_hist(rast(fi$outfile)), stretch = F)
plot_raster_src(xm[1], 3:1, rgb_trans = "hist")
plot_raster_src(xm, 3:1, rgb_trans = "linear")
plotRGB(rast(xm))
plotRGB(rast(xm), stretch = T)
plotRGB(stretch_hist(rast(xm)))
rast(xm)
plotRGB(stretch_hist(rast(xm)[[1:3]]))
plotRGB(stretch_hist(rast(xm)[[3:1]]))
library(terra)
par(mfrow = c(2, 2))
plotRGB(r, stretch = TRUE)
plotRGB(stretch_hist(rast(fi$outfile)))
plotRGB(stretch_hist(rast(xm)[[3:1]]))
#plotRGB(stretch_hist(rast(fi$outfile)), stretch = F)
plot_raster_src(xm[1], 3:1, rgb_trans = "hist")
plot_raster_src(xm, 3:1, rgb_trans = "linear")
library(terra)
par(mfrow = c(2, 2))
plotRGB(r, stretch = TRUE)
plotRGB(stretch_hist(rast(fi$outfile)))
#plotRGB(stretch_hist(rast(fi$outfile)), stretch = F)
#plot_raster_src(xm[1], 3:1, rgb_trans = "hist")
plotRGB(stretch_hist(rast(xm)[[3:1]]))
plot_raster_src(xm, 3:1, rgb_trans = "linear")
fi <- sample_n(result, 1L)
xm <- fi_vrtility(fi)
r <- fi_rgb(fi, fex = 1)
library(terra)
par(mfrow = c(2, 2))
plotRGB(r, stretch = TRUE)
plotRGB(stretch_hist(rast(fi$outfile)))
#plotRGB(stretch_hist(rast(fi$outfile)), stretch = F)
#plot_raster_src(xm[1], 3:1, rgb_trans = "hist")
plotRGB(stretch_hist(rast(xm)[[3:1]]))
plot_raster_src(xm, 3:1, rgb_trans = "linear")
rast(xm)
rast(xm) * 1
result <- filter(result, location == "Macquarie")
result
v <- result$outfile[1:10]
v <- result$outfile[1:4]
plotRGB(stretch_hist(rast(v[1])))
plotRGB(stretch_hist(rast(v[2])))
plotRGB(stretch_hist(rast(v[3])))
plotRGB(stretch_hist(rast(v[4])))
rast(v)
val <- values(rast(v))
sr <- stretch(rast(matrix(val)), histeq = TRUE, maxcell = Inf)
rv <- rast(v)
nr <- setValues(rv, c(values(sr)))
plotRGB(nr[[1:3]])
plotRGB(nr[[1:3]], stretch = T)
par(mfrow = c(2, 2))
plotRGB(nr[[1:3]], stretch = T)
plotRGB(nr[[4:6]], stretch = T)
plotRGB(nr[[7:9]], stretch = T)
plotRGB(nr[[10:12]], stretch = T)
par(mfrow = c(2, 4))
plotRGB(nr[[1:3]], stretch = T)
plotRGB(nr[[4:6]], stretch = T)
plotRGB(nr[[7:9]], stretch = T)
plotRGB(nr[[10:12]], stretch = T)
plotRGB(stretch_hist(rast(v[1])))
plotRGB(stretch_hist(rast(v[2])))
plotRGB(stretch_hist(rast(v[3])))
plotRGB(stretch_hist(rast(v[4])))
tar_load(result)
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
par(mfrow = c(3, 4))
for (i in 1:12) plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
for (i in 1:12) plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
for (i in 1:12) plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
for (i in 1:12) plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
for (i in 1:12) plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
unique(result$location)
result <- filter(result, location == "Macquarie")
for (i in 1:12) plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
nrow(result)
result <- filter(result, location == "West_Ice_Shelf")
tar_load(result)
result <- filter(result, location == "West_Ice_Shelf")
for (i in 1:12) plotRGB(stretch_hist(rast(sample(result$outfile, 1))))
for (i in 1:12) plotRGB(stretch_hist(rast(result$outfile[i])))
result$lsolard
result$solard
for (i in 1:12) plotRGB(stretch_hist(rast(result$outfile[i + 17])))
par(mfrow = n2mfrow(nrow(result)))
for (i in 1:nrow(result)) plotRGB(stretch_hist(rast(result$outfile[i])))
tar_load(tabl)
x <- readxl::read_excel("Emperor penguin colony locations_all_2024.xlsx", skip = 2) |>
dplyr::rename(location = colony, lon = long) |> dplyr::select(-date)
x <- readxl::read_excel("Emperor penguin colony locations_all_2024.xlsx", skip = 2) |>
dplyr::rename(location = colony, lon = long)
x$date[x$location == "West Ice Shelf"]
graphics.off()
plotRGB(rast(result$outfile[19]))
plotRGB(stretch_hist(rast(result$outfile[19])))
plotRGB(stretch_hist(rast(result$outfile[19])), smooth = F)
plotRGB(stretch_hist(rast(result$outfile[18])), smooth = F)
x$lon[x$location == "West Ice Shelf"]
x$lat[x$location == "West Ice Shelf"]
result$assets[[1]]$centroid_lat
result$assets[[1]]$centroid_lon
par(mfrow = n2mfrow(nrow(result)))
for (i in 1:nrow(result)) plotRGB(stretch_hist(rast(result$outfile[i])))
result$date[19]
result$assets[[19]]$solarday
result$assets[[20]]$solarday
result$assets[[18]]$solarday
unique(result$location)
tar_load(result)
unique(result$location)
result <- filter(result, location == "Flutter")
par(mfrow = n2mfrow(nrow(result)))
for (i in 1:nrow(result)) plotRGB(stretch_hist(rast(result$outfile[i])))
tar_load(result)
result <- filter(result, location == "Amundsen_Bay")
par(mfrow = n2mfrow(nrow(result)))
for (i in 1:nrow(result)) plotRGB(stretch_hist(rast(result$outfile[i])))
graphics.off()
plotRGB(stretch_hist(result$outfile[8]))
plotRGB(stretch_hist(rast(result$outfile[8])))
result$solard[8]
x$location == "Amundsen Bay"
x$date[x$location == "Amundsen Bay"]
par(mfrow = n2mfrow(nrow(result[8:nrow(result), ])))
for (i in 8:nrow(result)) plotRGB(stretch_hist(rast(result$outfile[i])))
graphics.off()
plotRGB(stretch_hist(rast(result$outfile[16])))
plotRGB(stretch_hist(rast(result$outfile[8])))
plotRGB(stretch_hist(rast(result$outfile[16])))
tar_load(result)
unique(result$location)
result <- filter(result, location == "Auster")
par(mfrow = n2mfrow(nrow(result))
)
for (i in 1:nrow(result)) plotRGB(stretch_hist(rast(result$outfile[i])))
v1 <- result$outfile[c(1, 10)]
graphics.off()
r1 <- rast(v1[1])
r2 <- rast(v1[2])
plot(r1)
plot(r2)
plot(r2[[1]])
plot(r2[[1]] - r[[2]])
plot(r2[[1]] - r2[[2]])
plot(r2[[1]] - r2[[3]])
plot(r2[[2]] - r2[[3]])
hist(values(r2[[1]]))
hist(values(r2[[2]]))
hist(values(r2[[3]]))
plot(r1[[2]] - r1[[3]])
plot(r1[[1]] - r1[[3]])
plot(r1[[1]])
plot(r1[[2]])
plot(r1[[1]])
plot(r1[[2]])
plot(r1[[1]] - r1[[2]])
plot(r1[[3]])
plot(r2)
plot(r1)
r1 * 1
r2 * 1
plotRGB(stretch_hist(r1))
plotRGB(stretch_hist(r2))
r2 <- rast(v1[2], raw = TRUE)
r1 <- rast(v1[1], raw = TRUE)
plotRGB(stretch_hist(r1))
plotRGB(stretch_hist(r2))
r1 * 1
r2 * 2
r1 * 1
r2 * 1
par(mfrow = c(6, 1))
plot(hist(values(r1[[1]])))
par(mfrow = c(6, 1))
plot(hist(values(r1[[1]])[,2]))
head(values(r1[[1]]))
plot(hist(values(r1[[1]])[,1]))
par(mfrow = c(6, 1))
plot(hist(values(r1[[1]])[,1]))
hist(values(r1[[1]])[,1])
par(mfrow = c(6, 1))
hist(values(r1[[1]])[,1])
hist(values(r1[[2]])[,1])
hist(values(r1[[3]])[,1])
hist(values(r2[[1]])[,1])
hist(values(r2[[2]])[,1])
hist(values(r2[[3]])[,1])
vis <- rast(result$assets[[1]]$visual)
vis <- rast(result$assets[[1]]$visual, vsi = T)
plotRGB(vis)
graphics.off()
plotRGB(vis)
vis <- rast(result$assets[[10]]$visual, vsi = T)
plotRGB(vis)
plotRGB(stretch_hist(vis))
tar_make()
library(targets)
tar_watch()
?tflow::use_tflow
usethis::create_project("../tflowtest")
